if (typeof OpenAssessment == "undefined" || !OpenAssessment) {
    OpenAssessment = {};
}

if (typeof window.gettext === "undefined") {
    window.gettext = function(text) {
        return text;
    };
}

OpenAssessment.BaseView = function(runtime, element, server) {
    this.runtime = runtime;
    this.element = element;
    this.server = server;
    this.responseView = new OpenAssessment.ResponseView(this.element, this.server, this);
    this.trainingView = new OpenAssessment.StudentTrainingView(this.element, this.server, this);
    this.selfView = new OpenAssessment.SelfView(this.element, this.server, this);
    this.peerView = new OpenAssessment.PeerView(this.element, this.server, this);
    this.gradeView = new OpenAssessment.GradeView(this.element, this.server, this);
    this.messageView = new OpenAssessment.MessageView(this.element, this.server, this);
    this.staffInfoView = new OpenAssessment.StaffInfoView(this.element, this.server, this);
};

OpenAssessment.BaseView.prototype = {
    scrollToTop: function() {
        if ($.scrollTo instanceof Function) {
            $(window).scrollTo($("#openassessment__steps"), 800, {
                offset: -50
            });
        }
    },
    setUpCollapseExpand: function(parentSel, onExpand) {
        parentSel.find(".ui-toggle-visibility__control").click(function(eventData) {
            var sel = $(eventData.target).closest(".ui-toggle-visibility");
            if (sel.hasClass("is--collapsed") && onExpand !== undefined) {
                onExpand();
            }
            sel.toggleClass("is--collapsed");
        });
    },
    load: function() {
        this.responseView.load();
        this.loadAssessmentModules();
        this.staffInfoView.load();
    },
    loadAssessmentModules: function() {
        this.trainingView.load();
        this.peerView.load();
        this.selfView.load();
        this.gradeView.load();
    },
    loadMessageView: function() {
        this.messageView.load();
    },
    toggleActionError: function(type, msg) {
        var element = this.element;
        var container = null;
        if (type == "save") {
            container = ".response__submission__actions";
        } else if (type == "submit" || type == "peer" || type == "self" || type == "student-training") {
            container = ".step__actions";
        } else if (type == "feedback_assess") {
            container = ".submission__feedback__actions";
        }
        if (container === null) {
            if (msg !== null) {
                console.log(msg);
            }
        } else {
            var msgHtml = msg === null ? "" : msg;
            $(container + " .message__content", element).html("<p>" + msgHtml + "</p>");
            $(container, element).toggleClass("has--error", msg !== null);
        }
    },
    showLoadError: function(step) {
        var container = "#openassessment__" + step;
        $(container).toggleClass("has--error", true);
        $(container + " .step__status__value i").removeClass().addClass("ico icon-warning-sign");
        $(container + " .step__status__value .copy").html(gettext("Unable to Load"));
    }
};

function OpenAssessmentBlock(runtime, element) {
    var server = new OpenAssessment.Server(runtime, element);
    var view = new OpenAssessment.BaseView(runtime, element, server);
    view.load();
}

OpenAssessment.StudioView = function(runtime, element, server) {
    this.runtime = runtime;
    this.server = server;
    var liveElement = $(element);
    this.promptBox = $("#openassessment_prompt_editor", liveElement).get(0);
    this.titleField = $("#openassessment_title_editor", liveElement).first().get(0);
    this.submissionStartField = $("#openassessment_submission_start_editor", liveElement).first().get(0);
    this.submissionDueField = $("#openassessment_submission_due_editor", liveElement).first().get(0);
    this.hasPeer = $("#include_peer_assessment", liveElement);
    this.hasSelf = $("#include_self_assessment", liveElement);
    this.hasAI = $("#include_ai_assessment", liveElement);
    this.hasTraining = $("#include_student_training", liveElement);
    this.peerMustGrade = $("#peer_assessment_must_grade", liveElement);
    this.peerGradedBy = $("#peer_assessment_graded_by", liveElement);
    this.peerStart = $("#peer_assessment_start_date", liveElement);
    this.peerDue = $("#peer_assessment_due_date", liveElement);
    this.selfStart = $("#self_assessment_start_date", liveElement);
    this.selfDue = $("#self_assessment_due_date", liveElement);
    this.rubricXmlBox = CodeMirror.fromTextArea($("#openassessment_rubric_editor", liveElement).first().get(0), {
        mode: "xml",
        lineNumbers: true,
        lineWrapping: true
    });
    this.aiTrainingExamplesCodeBox = CodeMirror.fromTextArea($("#ai_training_examples", liveElement).first().get(0), {
        mode: "xml",
        lineNumbers: true,
        lineWrapping: true
    });
    this.studentTrainingExamplesCodeBox = CodeMirror.fromTextArea($("#student_training_examples", liveElement).first().get(0), {
        mode: "xml",
        lineNumbers: true,
        lineWrapping: true
    });
    var criterionBodyHtml = $("#openassessment_criterion_1", liveElement).html();
    var criterionHtml = '<li class="openassessment_criterion" id="openassessment_criterion_1">' + criterionBodyHtml + "</li>";
    this.criterionHtmlTemplate = criterionHtml.replace(new RegExp("1", "g"), "C-C-C");
    var optionBodyHtml = $("#openassessment_criterion_1_option_1", liveElement).html();
    var optionHtml = '<li id=openassessment_criterion_1_option_1 class="openassessment_criterion_option">' + optionBodyHtml + "</li>";
    var criterionsReplaced = optionHtml.replace(new RegExp("criterion_1", "g"), "criterion_C-C-C");
    this.optionHtmlTemplate = criterionsReplaced.replace(new RegExp("option_1", "g"), "option_O-O-O");
    this.numberOfCriteria = 0;
    this.numberOfOptions = [];
    this.rubricCriteriaSelectors = [];
    $("#openassessment_criterion_list", liveElement).empty();
    this.addNewCriterionToRubric(liveElement);
    var view = this;
    $(".openassessment_save_button", liveElement).click(function(eventData) {
        view.save();
    });
    $(".openassessment_cancel_button", liveElement).click(function(eventData) {
        view.cancel();
    });
    $(".openassessment_editor_content_and_tabs", liveElement).tabs({
        activate: function(event, ui) {
            view.rubricXmlBox.refresh();
        }
    });
    $("#include_peer_assessment", liveElement).change(function() {
        if (this.checked) {
            $("#peer_assessment_description_closed", liveElement).fadeOut("fast");
            $("#peer_assessment_settings_editor", liveElement).fadeIn();
        } else {
            $("#peer_assessment_settings_editor", liveElement).fadeOut("fast");
            $("#peer_assessment_description_closed", liveElement).fadeIn();
        }
    });
    $("#include_self_assessment", liveElement).change(function() {
        if (this.checked) {
            $("#self_assessment_description_closed", liveElement).fadeOut("fast");
            $("#self_assessment_settings_editor", liveElement).fadeIn();
        } else {
            $("#self_assessment_settings_editor", liveElement).fadeOut("fast");
            $("#self_assessment_description_closed", liveElement).fadeIn();
        }
    });
    $("#include_ai_assessment", liveElement).change(function() {
        if (this.checked) {
            $("#ai_assessment_description_closed", liveElement).fadeOut("fast");
            $("#ai_assessment_settings_editor", liveElement).fadeIn();
        } else {
            $("#ai_assessment_settings_editor", liveElement).fadeOut("fast");
            $("#ai_assessment_description_closed", liveElement).fadeIn();
        }
    });
    $("#include_student_training", liveElement).change(function() {
        if (this.checked) {
            $("#student_training_description_closed", liveElement).fadeOut("fast");
            $("#student_training_settings_editor", liveElement).fadeIn();
        } else {
            $("#student_training_settings_editor", liveElement).fadeOut("fast");
            $("#student_training_description_closed", liveElement).fadeIn();
        }
    });
    $("#openassessment_rubric_add_criterion", liveElement).click(function(eventData) {
        view.addNewCriterionToRubric(liveElement);
    });
};

OpenAssessment.StudioView.prototype = {
    load: function() {
        var view = this;
        this.server.loadEditorContext().done(function(prompt, rubricXml, title, subStart, subDue, assessments) {
            view.rubricXmlBox.setValue(rubricXml);
            view.submissionStartField.value = subStart;
            view.submissionDueField.value = subDue;
            view.promptBox.value = prompt;
            view.titleField.value = title;
            view.hasTraining.prop("checked", false).change();
            view.hasPeer.prop("checked", false).change();
            view.hasSelf.prop("checked", false).change();
            view.hasAI.prop("checked", false).change();
            for (var i = 0; i < assessments.length; i++) {
                var assessment = assessments[i];
                if (assessment.name == "peer-assessment") {
                    view.peerMustGrade.prop("value", assessment.must_grade);
                    view.peerGradedBy.prop("value", assessment.must_be_graded_by);
                    view.peerStart.prop("value", assessment.start);
                    view.peerDue.prop("value", assessment.due);
                    view.hasPeer.prop("checked", true).change();
                } else if (assessment.name == "self-assessment") {
                    view.selfStart.prop("value", assessment.start);
                    view.selfDue.prop("value", assessment.due);
                    view.hasSelf.prop("checked", true).change();
                } else if (assessment.name == "example-based-assessment") {
                    view.aiTrainingExamplesCodeBox.setValue(assessment.examples);
                    view.hasAI.prop("checked", true).change();
                } else if (assessment.name == "student-training") {
                    view.studentTrainingExamplesCodeBox.setValue(assessment.examples);
                    view.hasTraining.prop("checked", true).change();
                }
            }
        }).fail(function(msg) {
            view.showError(msg);
        });
    },
    save: function() {
        var view = this;
        this.server.checkReleased().done(function(isReleased) {
            if (isReleased) {
                view.confirmPostReleaseUpdate($.proxy(view.updateEditorContext, view));
            } else {
                view.updateEditorContext();
            }
        }).fail(function(errMsg) {
            view.showError(errMsg);
        });
    },
    confirmPostReleaseUpdate: function(onConfirm) {
        var msg = gettext("This problem has already been released. Any changes will apply only to future assessments.");
        if (confirm(msg)) {
            onConfirm();
        }
    },
    addNewCriterionToRubric: function(liveElement) {
        var view = this;
        var newCriterionID = this.numberOfCriteria + 1;
        this.numberOfCriteria += 1;
        this.numberOfOptions[newCriterionID] = 0;
        var criterionHtml = this.criterionHtmlTemplate.replace(new RegExp("C-C-C", "g"), "" + newCriterionID);
        $("#openassessment_criterion_list", liveElement).append(criterionHtml);
        liveElement = $("#openassessment_criterion_" + newCriterionID);
        $(".openassessment_criterion_option_list", liveElement).empty();
        view.rubricCriteriaSelectors[newCriterionID] = {
            criterion: liveElement,
            name: $(".openassessment_criterion_name", liveElement).first(),
            prompt: $(".openassessment_criterion_prompt", liveElement).first(),
            options: [],
            feedback: $(".openassessment_criterion_feedbac", liveElement).first()
        };
        view.addNewOptionToCriterion(liveElement, newCriterionID);
        $("#openassessment_display_criterion_" + newCriterionID, liveElement).change(function() {
            if (this.checked) {
                $("#openassessment_criterion_body_" + newCriterionID, liveElement).fadeIn();
            } else {
                $("#openassessment_criterion_body_" + newCriterionID, liveElement).fadeOut();
            }
        });
        $("#openassessment_criterion_" + newCriterionID + "_remove", liveElement).click(function(eventData) {
            var numCriteria = view.numberOfCriteria;
            var selectors = view.rubricCriteriaSelectors;
            for (var i = newCriterionID; i < numCriteria; i++) {
                selectors[i].name.prop("value", selectors[i + 1].name.prop("value"));
                selectors[i].prompt.prop("value", selectors[i + 1].prompt.prop("value"));
                selectors[i].feedback.prop("value", selectors[i + 1].feedback.prop("value"));
                var options1 = selectors[i].options;
                var options2 = selectors[i].options;
                var numOptions = view.numberOfOptions[i + 1];
                for (var j = 1; j < numOptions; j++) {
                    options1[j].points.prop("value", options2[j].points.prop("value"));
                    options1[j].name.prop("value", options2[j].name.prop("value"));
                    options1[j].explanation.prop("value", options2[j].explanation.prop("value"));
                }
            }
            view.rubricCriteriaSelectors[view.rubricCriteriaSelectors.length].criterion.remove();
            view.rubricCriteriaSelectors = view.rubricCriteriaSelectors.slice(0, numCriteria);
            view.numberOfOptions = view.numberOfOptions.slice(0, numCriteria);
            view.numberOfCriteria -= 1;
        });
        $("#openassessment_criterion_" + newCriterionID + "_add_option", liveElement).click(function(eventData) {
            view.addNewOptionToCriterion(liveElement, newCriterionID);
        });
        $(".openassessment_feedback_remove_button", liveElement).click(function(eventData) {
            $(".openassessment_criterion_feedback_direction", liveElement).fadeOut();
            $(".openassessment_criterion_feedback_header_open", liveElement).fadeOut();
            $(".openassessment_criterion_feedback_header_closed", liveElement).fadeIn();
            $(".openassessment_feedback_remove_button", liveElement).fadeOut();
        });
        $(".openassessment_criterion_feedback_header_closed", liveElement).click(function(eventData) {
            $(".openassessment_criterion_feedback_direction", liveElement).fadeIn();
            $(".openassessment_criterion_feedback_header_open", liveElement).fadeIn();
            $(".openassessment_criterion_feedback_header_closed", liveElement).fadeOut();
            $(".openassessment_feedback_remove_button", liveElement).fadeIn();
        });
        $(".openassessment_criterion_feedback_header_closed", liveElement).hide();
    },
    addNewOptionToCriterion: function(liveElement, criterionID) {
        var view = this;
        var newOptionID = this.numberOfOptions[criterionID] + 1;
        this.numberOfOptions[criterionID] += 1;
        var optionHtml = this.optionHtmlTemplate;
        optionHtml = optionHtml.replace(new RegExp("C-C-C", "g"), "" + criterionID);
        optionHtml = optionHtml.replace(new RegExp("O-O-O", "g"), "" + newOptionID);
        $("#openassessment_criterion_" + criterionID + "_options", liveElement).append(optionHtml);
        liveElement = $("#openassessment_criterion_" + criterionID + "_option_" + newOptionID);
        view.rubricCriteriaSelectors[criterionID].options[newOptionID] = {
            option: liveElement,
            points: $("#openassessment_criterion_" + criterionID + "_option_" + newOptionID + "_points", liveElement),
            name: $("#openassessment_criterion_" + criterionID + "_option_" + newOptionID + "_name", liveElement),
            explanation: $("#openassessment_criterion_" + criterionID + "_option_" + newOptionID + "_explanation", liveElement)
        };
        $("#openassessment_criterion_" + criterionID + "_option_" + newOptionID + "_remove", liveElement).click(function(eventData) {
            var numberOfOptions = view.numberOfOptions[criterionID];
            var optionSelectors = view.rubricCriteriaSelectors[criterionID].options;
            for (var i = newOptionID; i < numberOfOptions; i++) {
                optionSelectors[i].points.prop("value", optionSelectors[i + 1].points.prop("value"));
                optionSelectors[i].name.prop("value", optionSelectors[i + 1].name.prop("value"));
                optionSelectors[i].explanation.prop("value", optionSelectors[i + 1].explanation.prop("value"));
            }
            optionSelectors[optionSelectors.length - 1].option.remove();
            view.rubricCriteriaSelectors[criterionID].options = view.rubricCriteriaSelectors[criterionID].options.slice(0, optionSelectors.length - 1);
            view.numberOfOptions[criterionID] -= 1;
        });
    },
    updateEditorContext: function() {
        this.runtime.notify("save", {
            state: "start"
        });
        var prompt = this.promptBox.value;
        var rubricXml = this.rubricXmlBox.getValue();
        var title = this.titleField.value;
        var subStart = this.submissionStartField.value;
        var subDue = this.submissionDueField.value;
        var assessments = [];
        if (this.hasTraining.prop("checked")) {
            assessments[assessments.length] = {
                name: "student-training",
                examples: this.studentTrainingExamplesCodeBox.getValue()
            };
        }
        if (this.hasPeer.prop("checked")) {
            var assessment = {
                name: "peer-assessment",
                must_grade: parseInt(this.peerMustGrade.prop("value")),
                must_be_graded_by: parseInt(this.peerGradedBy.prop("value"))
            };
            var startStr = this.peerStart.prop("value");
            var dueStr = this.peerDue.prop("value");
            if (startStr) {
                assessment = $.extend(assessment, {
                    start: startStr
                });
            }
            if (dueStr) {
                assessment = $.extend(assessment, {
                    due: dueStr
                });
            }
            assessments[assessments.length] = assessment;
        }
        if (this.hasSelf.prop("checked")) {
            assessment = {
                name: "self-assessment"
            };
            startStr = this.selfStart.prop("value");
            dueStr = this.selfDue.prop("value");
            if (startStr) {
                assessment = $.extend(assessment, {
                    start: startStr
                });
            }
            if (dueStr) {
                assessment = $.extend(assessment, {
                    due: dueStr
                });
            }
            assessments[assessments.length] = assessment;
        }
        if (this.hasAI.prop("checked")) {
            assessments[assessments.length] = {
                name: "example-based-assessment",
                examples: this.aiTrainingExamplesCodeBox.getValue()
            };
        }
        var view = this;
        this.server.updateEditorContext(prompt, rubricXml, title, subStart, subDue, assessments).done(function() {
            view.runtime.notify("save", {
                state: "end"
            });
            view.load();
        }).fail(function(msg) {
            view.showError(msg);
        });
    },
    cancel: function() {
        this.runtime.notify("cancel", {});
    },
    showError: function(errorMsg) {
        this.runtime.notify("error", {
            msg: errorMsg
        });
    }
};

function OpenAssessmentEditor(runtime, element) {
    var server = new OpenAssessment.Server(runtime, element);
    var view = new OpenAssessment.StudioView(runtime, element, server);
    view.load();
}

OpenAssessment.GradeView = function(element, server, baseView) {
    this.element = element;
    this.server = server;
    this.baseView = baseView;
};

OpenAssessment.GradeView.prototype = {
    load: function() {
        var view = this;
        var baseView = this.baseView;
        this.server.render("grade").done(function(html) {
            $("#openassessment__grade", view.element).replaceWith(html);
            view.installHandlers();
        }).fail(function(errMsg) {
            baseView.showLoadError("grade", errMsg);
        });
    },
    installHandlers: function() {
        var sel = $("#openassessment__grade", this.element);
        this.baseView.setUpCollapseExpand(sel);
        var view = this;
        sel.find("#feedback__submit").click(function(eventObject) {
            eventObject.preventDefault();
            view.submitFeedbackOnAssessment();
        });
    },
    feedbackText: function(text) {
        if (typeof text === "undefined") {
            return $("#feedback__remarks__value", this.element).val();
        } else {
            $("#feedback__remarks__value", this.element).val(text);
        }
    },
    feedbackOptions: function(options) {
        var view = this;
        if (typeof options === "undefined") {
            return $.map($(".feedback__overall__value:checked", view.element), function(element, index) {
                return $(element).val();
            });
        } else {
            $(".feedback__overall__value", this.element).prop("checked", false);
            $.each(options, function(index, opt) {
                $("#feedback__overall__value--" + opt, view.element).prop("checked", true);
            });
        }
    },
    setHidden: function(sel, hidden) {
        sel.toggleClass("is--hidden", hidden);
        sel.attr("aria-hidden", hidden ? "true" : "false");
    },
    isHidden: function(sel) {
        return sel.hasClass("is--hidden") && sel.attr("aria-hidden") == "true";
    },
    feedbackState: function(newState) {
        var containerSel = $(".submission__feedback__content", this.element);
        var instructionsSel = containerSel.find(".submission__feedback__instructions");
        var fieldsSel = containerSel.find(".submission__feedback__fields");
        var actionsSel = containerSel.find(".submission__feedback__actions");
        var transitionSel = containerSel.find(".transition__status");
        var messageSel = containerSel.find(".message--complete");
        if (typeof newState === "undefined") {
            var isSubmitting = containerSel.hasClass("is--transitioning") && containerSel.hasClass("is--submitting") && !this.isHidden(transitionSel) && this.isHidden(messageSel) && this.isHidden(instructionsSel) && this.isHidden(fieldsSel) && this.isHidden(actionsSel);
            var hasSubmitted = containerSel.hasClass("is--submitted") && this.isHidden(transitionSel) && !this.isHidden(messageSel) && this.isHidden(instructionsSel) && this.isHidden(fieldsSel) && this.isHidden(actionsSel);
            var isOpen = !containerSel.hasClass("is--submitted") && !containerSel.hasClass("is--transitioning") && !containerSel.hasClass("is--submitting") && this.isHidden(transitionSel) && this.isHidden(messageSel) && !this.isHidden(instructionsSel) && !this.isHidden(fieldsSel) && !this.isHidden(actionsSel);
            if (isOpen) {
                return "open";
            } else if (isSubmitting) {
                return "submitting";
            } else if (hasSubmitted) {
                return "submitted";
            } else {
                throw "Invalid feedback state";
            }
        } else {
            if (newState == "open") {
                containerSel.toggleClass("is--transitioning", false);
                containerSel.toggleClass("is--submitting", false);
                containerSel.toggleClass("is--submitted", false);
                this.setHidden(instructionsSel, false);
                this.setHidden(fieldsSel, false);
                this.setHidden(actionsSel, false);
                this.setHidden(transitionSel, true);
                this.setHidden(messageSel, true);
            } else if (newState == "submitting") {
                containerSel.toggleClass("is--transitioning", true);
                containerSel.toggleClass("is--submitting", true);
                containerSel.toggleClass("is--submitted", false);
                this.setHidden(instructionsSel, true);
                this.setHidden(fieldsSel, true);
                this.setHidden(actionsSel, true);
                this.setHidden(transitionSel, false);
                this.setHidden(messageSel, true);
            } else if (newState == "submitted") {
                containerSel.toggleClass("is--transitioning", false);
                containerSel.toggleClass("is--submitting", false);
                containerSel.toggleClass("is--submitted", true);
                this.setHidden(instructionsSel, true);
                this.setHidden(fieldsSel, true);
                this.setHidden(actionsSel, true);
                this.setHidden(transitionSel, true);
                this.setHidden(messageSel, false);
            }
        }
    },
    submitFeedbackOnAssessment: function() {
        var view = this;
        var baseView = this.baseView;
        $("#feedback__submit", this.element).toggleClass("is--disabled", true);
        view.feedbackState("submitting");
        this.server.submitFeedbackOnAssessment(this.feedbackText(), this.feedbackOptions()).done(function() {
            view.feedbackState("submitted");
        }).fail(function(errMsg) {
            baseView.toggleActionError("feedback_assess", errMsg);
        });
    }
};

OpenAssessment.MessageView = function(element, server, baseView) {
    this.element = element;
    this.server = server;
    this.baseView = baseView;
};

OpenAssessment.MessageView.prototype = {
    load: function() {
        var view = this;
        var baseView = this.baseView;
        this.server.render("message").done(function(html) {
            $("#openassessment__message", view.element).replaceWith(html);
        }).fail(function(errMsg) {
            baseView.showLoadError("message", errMsg);
        });
    }
};

OpenAssessment.PeerView = function(element, server, baseView) {
    this.element = element;
    this.server = server;
    this.baseView = baseView;
    this.rubric = null;
};

OpenAssessment.PeerView.prototype = {
    load: function() {
        var view = this;
        this.server.render("peer_assessment").done(function(html) {
            $("#openassessment__peer-assessment", view.element).replaceWith(html);
            view.installHandlers(false);
        }).fail(function(errMsg) {
            view.baseView.showLoadError("peer-assessment");
        });
        view.baseView.loadMessageView();
    },
    loadContinuedAssessment: function() {
        var view = this;
        this.server.renderContinuedPeer().done(function(html) {
            $("#openassessment__peer-assessment", view.element).replaceWith(html);
            view.installHandlers(true);
        }).fail(function(errMsg) {
            view.baseView.showLoadError("peer-assessment");
        });
    },
    installHandlers: function(isContinuedAssessment) {
        var sel = $("#openassessment__peer-assessment", this.element);
        var view = this;
        this.baseView.setUpCollapseExpand(sel, $.proxy(view.loadContinuedAssessment, view));
        var rubricSelector = $("#peer-assessment--001__assessment", this.element);
        if (rubricSelector.size() > 0) {
            var rubricElement = rubricSelector.get(0);
            this.rubric = new OpenAssessment.Rubric(rubricElement);
        }
        if (this.rubric !== null) {
            this.rubric.canSubmitCallback($.proxy(view.peerSubmitEnabled, view));
        }
        sel.find("#peer-assessment--001__assessment__submit").click(function(eventObject) {
            eventObject.preventDefault();
            if (!isContinuedAssessment) {
                view.peerAssess();
            } else {
                view.continuedPeerAssess();
            }
        });
    },
    peerSubmitEnabled: function(enabled) {
        var button = $("#peer-assessment--001__assessment__submit", this.element);
        if (typeof enabled === "undefined") {
            return !button.hasClass("is--disabled");
        } else {
            button.toggleClass("is--disabled", !enabled);
        }
    },
    peerAssess: function() {
        var view = this;
        var baseView = view.baseView;
        this.peerAssessRequest(function() {
            view.load();
            baseView.loadAssessmentModules();
            baseView.scrollToTop();
        });
    },
    continuedPeerAssess: function() {
        var view = this;
        var gradeView = this.baseView.gradeView;
        var baseView = view.baseView;
        view.peerAssessRequest(function() {
            view.loadContinuedAssessment();
            gradeView.load();
            baseView.scrollToTop();
        });
    },
    peerAssessRequest: function(successFunction) {
        var view = this;
        view.baseView.toggleActionError("peer", null);
        view.peerSubmitEnabled(false);
        this.server.peerAssess(this.rubric.optionsSelected(), this.rubric.criterionFeedback(), this.overallFeedback()).done(successFunction).fail(function(errMsg) {
            view.baseView.toggleActionError("peer", errMsg);
            view.peerSubmitEnabled(true);
        });
    },
    overallFeedback: function(overallFeedback) {
        var selector = "#assessment__rubric__question--feedback__value";
        if (typeof overallFeedback === "undefined") {
            return $(selector, this.element).val();
        } else {
            $(selector, this.element).val(overallFeedback);
        }
    }
};

OpenAssessment.ResponseView = function(element, server, baseView) {
    this.element = element;
    this.server = server;
    this.baseView = baseView;
    this.savedResponse = "";
    this.lastChangeTime = Date.now();
    this.errorOnLastSave = false;
    this.autoSaveTimerId = null;
};

OpenAssessment.ResponseView.prototype = {
    AUTO_SAVE_POLL_INTERVAL: 2e3,
    AUTO_SAVE_WAIT: 3e4,
    load: function() {
        var view = this;
        this.server.render("submission").done(function(html) {
            $("#openassessment__response", view.element).replaceWith(html);
            view.installHandlers();
            view.setAutoSaveEnabled(true);
        }).fail(function(errMsg) {
            view.baseView.showLoadError("response");
        });
    },
    installHandlers: function() {
        var sel = $("#openassessment__response", this.element);
        var view = this;
        this.baseView.setUpCollapseExpand(sel);
        this.savedResponse = this.response();
        var handleChange = function(eventData) {
            view.handleResponseChanged();
        };
        sel.find("#submission__answer__value").on("change keyup drop paste", handleChange);
        sel.find("#step--response__submit").click(function(eventObject) {
            eventObject.preventDefault();
            view.submit();
        });
        sel.find("#submission__save").click(function(eventObject) {
            eventObject.preventDefault();
            view.save();
        });
    },
    setAutoSaveEnabled: function(enabled) {
        if (enabled) {
            if (this.autoSaveTimerId === null) {
                this.autoSaveTimerId = setInterval($.proxy(this.autoSave, this), this.AUTO_SAVE_POLL_INTERVAL);
            }
        } else {
            if (this.autoSaveTimerId !== null) {
                clearInterval(this.autoSaveTimerId);
            }
        }
    },
    submitEnabled: function(enabled) {
        var sel = $("#step--response__submit", this.element);
        if (typeof enabled === "undefined") {
            return !sel.hasClass("is--disabled");
        } else {
            sel.toggleClass("is--disabled", !enabled);
        }
    },
    saveEnabled: function(enabled) {
        var sel = $("#submission__save", this.element);
        if (typeof enabled === "undefined") {
            return !sel.hasClass("is--disabled");
        } else {
            sel.toggleClass("is--disabled", !enabled);
        }
    },
    saveStatus: function(msg) {
        var sel = $("#response__save_status h3", this.element);
        if (typeof msg === "undefined") {
            return sel.text();
        } else {
            var label = gettext("Status of Your Response");
            sel.html('<span class="sr">' + label + ":" + "</span>\n" + msg);
        }
    },
    unsavedWarningEnabled: function(enabled) {
        if (typeof enabled === "undefined") {
            return window.onbeforeunload !== null;
        } else {
            if (enabled) {
                window.onbeforeunload = function() {
                    return gettext("If you leave this page without saving or submitting your response, you'll lose any work you've done on the response.");
                };
            } else {
                window.onbeforeunload = null;
            }
        }
    },
    response: function(text) {
        var sel = $("#submission__answer__value", this.element);
        if (typeof text === "undefined") {
            return sel.val();
        } else {
            sel.val(text);
        }
    },
    responseChanged: function() {
        var currentResponse = $.trim(this.response());
        var savedResponse = $.trim(this.savedResponse);
        return savedResponse !== currentResponse;
    },
    autoSave: function() {
        var timeSinceLastChange = Date.now() - this.lastChangeTime;
        if (this.responseChanged() && timeSinceLastChange > this.AUTO_SAVE_WAIT && !this.errorOnLastSave) {
            this.save();
        }
    },
    handleResponseChanged: function() {
        var isBlank = $.trim(this.response()) !== "";
        this.submitEnabled(isBlank);
        if (this.responseChanged()) {
            this.saveEnabled(isBlank);
            this.saveStatus(gettext("This response has not been saved."));
            this.unsavedWarningEnabled(true);
        }
        this.lastChangeTime = Date.now();
    },
    save: function() {
        this.errorOnLastSave = false;
        this.saveStatus(gettext("Saving..."));
        this.baseView.toggleActionError("save", null);
        this.unsavedWarningEnabled(false);
        var view = this;
        var savedResponse = this.response();
        this.server.save(savedResponse).done(function() {
            view.savedResponse = savedResponse;
            var currentResponse = view.response();
            view.submitEnabled(currentResponse !== "");
            if (currentResponse == savedResponse) {
                view.saveEnabled(false);
                view.saveStatus(gettext("This response has been saved but not submitted."));
            }
        }).fail(function(errMsg) {
            view.saveStatus(gettext("Error"));
            view.baseView.toggleActionError("save", errMsg);
            view.errorOnLastSave = true;
        });
    },
    submit: function() {
        this.submitEnabled(false);
        var view = this;
        var baseView = this.baseView;
        this.confirmSubmission().pipe(function() {
            var submission = $("#submission__answer__value", view.element).val();
            baseView.toggleActionError("response", null);
            return view.server.submit(submission);
        }).done($.proxy(view.moveToNextStep, view)).fail(function(errCode, errMsg) {
            if (errCode == "ENOMULTI") {
                view.moveToNextStep();
            } else {
                if (errMsg) {
                    baseView.toggleActionError("submit", errMsg);
                }
                view.submitEnabled(true);
            }
        });
    },
    moveToNextStep: function() {
        this.load();
        this.baseView.loadAssessmentModules();
        this.unsavedWarningEnabled(false);
    },
    confirmSubmission: function() {
        var msg = "You're about to submit your response for this assignment. " + "After you submit this response, you can't change it or submit a new response.";
        return $.Deferred(function(defer) {
            if (confirm(msg)) {
                defer.resolve();
            } else {
                defer.reject();
            }
        });
    }
};

OpenAssessment.Rubric = function(element) {
    this.element = element;
};

OpenAssessment.Rubric.prototype = {
    criterionFeedback: function(criterionFeedback) {
        var selector = "textarea.answer__value";
        var feedback = {};
        $(selector, this.element).each(function(index, sel) {
            if (typeof criterionFeedback !== "undefined") {
                $(sel).val(criterionFeedback[sel.name]);
                feedback[sel.name] = criterionFeedback[sel.name];
            } else {
                feedback[sel.name] = $(sel).val();
            }
        });
        return feedback;
    },
    optionsSelected: function(optionsSelected) {
        var selector = "input[type=radio]";
        if (typeof optionsSelected === "undefined") {
            var options = {};
            $(selector + ":checked", this.element).each(function(index, sel) {
                options[sel.name] = sel.value;
            });
            return options;
        } else {
            $(selector, this.element).prop("checked", false);
            $(selector, this.element).each(function(index, sel) {
                if (optionsSelected.hasOwnProperty(sel.name)) {
                    if (sel.value == optionsSelected[sel.name]) {
                        $(sel).prop("checked", true);
                    }
                }
            });
        }
    },
    canSubmitCallback: function(callback) {
        $(this.element).change(function() {
            var numChecked = $("input[type=radio]:checked", this).length;
            var numAvailable = $(".field--radio.assessment__rubric__question", this).length;
            var canSubmit = numChecked == numAvailable;
            callback(canSubmit);
        });
    },
    showCorrections: function(corrections) {
        var selector = "input[type=radio]";
        var hasErrors = false;
        $(selector, this.element).each(function(index, sel) {
            var listItem = $(sel).parents(".assessment__rubric__question");
            if (corrections.hasOwnProperty(sel.name)) {
                hasErrors = true;
                listItem.find(".message--incorrect").removeClass("is--hidden");
                listItem.find(".message--correct").addClass("is--hidden");
            } else {
                listItem.find(".message--correct").removeClass("is--hidden");
                listItem.find(".message--incorrect").addClass("is--hidden");
            }
        });
        return hasErrors;
    }
};

OpenAssessment.SelfView = function(element, server, baseView) {
    this.element = element;
    this.server = server;
    this.baseView = baseView;
    this.rubric = null;
};

OpenAssessment.SelfView.prototype = {
    load: function() {
        var view = this;
        this.server.render("self_assessment").done(function(html) {
            $("#openassessment__self-assessment", view.element).replaceWith(html);
            view.installHandlers();
        }).fail(function(errMsg) {
            view.showLoadError("self-assessment");
        });
    },
    installHandlers: function() {
        var view = this;
        var sel = $("#openassessment__self-assessment", view.element);
        this.baseView.setUpCollapseExpand(sel);
        var rubricSelector = $("#self-assessment--001__assessment", this.element);
        if (rubricSelector.size() > 0) {
            var rubricElement = rubricSelector.get(0);
            this.rubric = new OpenAssessment.Rubric(rubricElement);
        }
        if (this.rubric !== null) {
            this.rubric.canSubmitCallback($.proxy(this.selfSubmitEnabled, this));
        }
        sel.find("#self-assessment--001__assessment__submit").click(function(eventObject) {
            eventObject.preventDefault();
            view.selfAssess();
        });
    },
    selfSubmitEnabled: function(enabled) {
        var button = $("#self-assessment--001__assessment__submit", this.element);
        if (typeof enabled === "undefined") {
            return !button.hasClass("is--disabled");
        } else {
            button.toggleClass("is--disabled", !enabled);
        }
    },
    selfAssess: function() {
        var view = this;
        var baseView = this.baseView;
        baseView.toggleActionError("self", null);
        view.selfSubmitEnabled(false);
        var options = this.rubric.optionsSelected();
        this.server.selfAssess(options).done(function() {
            baseView.loadAssessmentModules();
            baseView.scrollToTop();
        }).fail(function(errMsg) {
            baseView.toggleActionError("self", errMsg);
            view.selfSubmitEnabled(true);
        });
    }
};

OpenAssessment.Server = function(runtime, element) {
    this.runtime = runtime;
    this.element = element;
};

OpenAssessment.Server.prototype = {
    url: function(handler) {
        return this.runtime.handlerUrl(this.element, handler);
    },
    render: function(component) {
        var url = this.url("render_" + component);
        return $.Deferred(function(defer) {
            $.ajax({
                url: url,
                type: "POST",
                dataType: "html"
            }).done(function(data) {
                defer.resolveWith(this, [ data ]);
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This section could not be loaded.") ]);
            });
        }).promise();
    },
    renderContinuedPeer: function() {
        var url = this.url("render_peer_assessment");
        return $.Deferred(function(defer) {
            $.ajax({
                url: url,
                type: "POST",
                dataType: "html",
                data: {
                    continue_grading: true
                }
            }).done(function(data) {
                defer.resolveWith(this, [ data ]);
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This section could not be loaded.") ]);
            });
        }).promise();
    },
    studentInfo: function(student_id) {
        var url = this.url("render_student_info");
        return $.Deferred(function(defer) {
            $.ajax({
                url: url,
                type: "POST",
                dataType: "html",
                data: {
                    student_id: student_id
                }
            }).done(function(data) {
                defer.resolveWith(this, [ data ]);
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This section could not be loaded.") ]);
            });
        }).promise();
    },
    submit: function(submission) {
        var url = this.url("submit");
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({
                    submission: submission
                })
            }).done(function(data) {
                var success = data[0];
                if (success) {
                    var studentId = data[1];
                    var attemptNum = data[2];
                    defer.resolveWith(this, [ studentId, attemptNum ]);
                } else {
                    var errorNum = data[1];
                    var errorMsg = data[2];
                    defer.rejectWith(this, [ errorNum, errorMsg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ "AJAX", gettext("This response could not be submitted.") ]);
            });
        }).promise();
    },
    save: function(submission) {
        var url = this.url("save_submission");
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({
                    submission: submission
                })
            }).done(function(data) {
                if (data.success) {
                    defer.resolve();
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This response could not be saved.") ]);
            });
        }).promise();
    },
    submitFeedbackOnAssessment: function(text, options) {
        var url = this.url("submit_feedback");
        var payload = JSON.stringify({
            feedback_text: text,
            feedback_options: options
        });
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: payload
            }).done(function(data) {
                if (data.success) {
                    defer.resolve();
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This feedback could not be submitted.") ]);
            });
        }).promise();
    },
    peerAssess: function(optionsSelected, criterionFeedback, overallFeedback) {
        var url = this.url("peer_assess");
        var payload = JSON.stringify({
            options_selected: optionsSelected,
            criterion_feedback: criterionFeedback,
            overall_feedback: overallFeedback
        });
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: payload
            }).done(function(data) {
                if (data.success) {
                    defer.resolve();
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This assessment could not be submitted.") ]);
            });
        }).promise();
    },
    selfAssess: function(optionsSelected) {
        var url = this.url("self_assess");
        var payload = JSON.stringify({
            options_selected: optionsSelected
        });
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: payload
            }).done(function(data) {
                if (data.success) {
                    defer.resolve();
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This assessment could not be submitted.") ]);
            });
        });
    },
    trainingAssess: function(optionsSelected) {
        var url = this.url("training_assess");
        var payload = JSON.stringify({
            options_selected: optionsSelected
        });
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: payload
            }).done(function(data) {
                if (data.success) {
                    defer.resolveWith(this, [ data.corrections ]);
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This assessment could not be submitted.") ]);
            });
        });
    },
    scheduleTraining: function() {
        var url = this.url("schedule_training");
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: '""'
            }).done(function(data) {
                if (data.success) {
                    defer.resolveWith(this, [ data.msg ]);
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This assessment could not be submitted.") ]);
            });
        });
    },
    rescheduleUnfinishedTasks: function() {
        var url = this.url("reschedule_unfinished_tasks");
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: '""'
            }).done(function(data) {
                if (data.success) {
                    defer.resolveWith(this, [ data.msg ]);
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("One or more rescheduling tasks failed.") ]);
            });
        });
    },
    loadEditorContext: function() {
        var url = this.url("editor_context");
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: '""'
            }).done(function(data) {
                if (data.success) {
                    defer.resolveWith(this, [ data.prompt, data.rubric, data.title, data.submission_start, data.submission_due, data.assessments ]);
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This problem could not be loaded.") ]);
            });
        }).promise();
    },
    updateEditorContext: function(prompt, rubricXml, title, sub_start, sub_due, assessments) {
        var url = this.url("update_editor_context");
        var payload = JSON.stringify({
            prompt: prompt,
            rubric: rubricXml,
            title: title,
            submission_start: sub_start,
            submission_due: sub_due,
            assessments: assessments
        });
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: payload
            }).done(function(data) {
                if (data.success) {
                    defer.resolve();
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("This problem could not be saved.") ]);
            });
        }).promise();
    },
    checkReleased: function() {
        var url = this.url("check_released");
        var payload = '""';
        return $.Deferred(function(defer) {
            $.ajax({
                type: "POST",
                url: url,
                data: payload
            }).done(function(data) {
                if (data.success) {
                    defer.resolveWith(this, [ data.is_released ]);
                } else {
                    defer.rejectWith(this, [ data.msg ]);
                }
            }).fail(function(data) {
                defer.rejectWith(this, [ gettext("The server could not be contacted.") ]);
            });
        }).promise();
    }
};

if (typeof OpenAssessment == "undefined" || !OpenAssessment) {
    OpenAssessment = {};
}

if (typeof window.gettext === "undefined") {
    window.gettext = function(text) {
        return text;
    };
}

OpenAssessment.StaffInfoView = function(element, server, baseView) {
    this.element = element;
    this.server = server;
    this.baseView = baseView;
};

OpenAssessment.StaffInfoView.prototype = {
    load: function() {
        var view = this;
        if ($("#openassessment__staff-info", view.element).length > 0) {
            this.server.render("staff_info").done(function(html) {
                $("#openassessment__staff-info", view.element).replaceWith(html);
                view.installHandlers();
            }).fail(function(errMsg) {
                view.baseView.showLoadError("staff_info");
            });
        }
    },
    loadStudentInfo: function() {
        var view = this;
        var sel = $("#openassessment__staff-info", this.element);
        var student_id = sel.find("#openassessment__student_id").val();
        this.server.studentInfo(student_id).done(function(html) {
            $("#openassessment__student-info", view.element).replaceWith(html);
        }).fail(function(errMsg) {
            view.showLoadError("student_info");
        });
    },
    installHandlers: function() {
        var sel = $("#openassessment__staff-info", this.element);
        var view = this;
        if (sel.length <= 0) {
            return;
        }
        this.baseView.setUpCollapseExpand(sel, function() {});
        sel.find("#openassessment_student_info_form").submit(function(eventObject) {
            eventObject.preventDefault();
            view.loadStudentInfo();
        });
        sel.find("#submit_student_id").click(function(eventObject) {
            eventObject.preventDefault();
            view.loadStudentInfo();
        });
        sel.find("#schedule_training").click(function(eventObject) {
            eventObject.preventDefault();
            view.scheduleTraining();
        });
        sel.find("#reschedule_unfinished_tasks").click(function(eventObject) {
            eventObject.preventDefault();
            view.rescheduleUnfinishedTasks();
        });
    },
    scheduleTraining: function() {
        var view = this;
        this.server.scheduleTraining().done(function(msg) {
            $("#schedule_training_message", this.element).text(msg);
        }).fail(function(errMsg) {
            $("#schedule_training_message", this.element).text(errMsg);
        });
    },
    rescheduleUnfinishedTasks: function() {
        var view = this;
        this.server.rescheduleUnfinishedTasks().done(function(msg) {
            $("#reschedule_unfinished_tasks_message", this.element).text(msg);
        }).fail(function(errMsg) {
            $("#reschedule_unfinished_tasks_message", this.element).text(errMsg);
        });
    }
};

OpenAssessment.StudentTrainingView = function(element, server, baseView) {
    this.element = element;
    this.server = server;
    this.baseView = baseView;
    this.rubric = null;
};

OpenAssessment.StudentTrainingView.prototype = {
    load: function() {
        var view = this;
        this.server.render("student_training").done(function(html) {
            $("#openassessment__student-training", view.element).replaceWith(html);
            view.installHandlers();
        }).fail(function(errMsg) {
            view.baseView.showLoadError("student-training");
        });
    },
    installHandlers: function() {
        var sel = $("#openassessment__student-training", this.element);
        var view = this;
        this.baseView.setUpCollapseExpand(sel);
        var rubricSelector = $("#student-training--001__assessment", this.element);
        if (rubricSelector.size() > 0) {
            var rubricElement = rubricSelector.get(0);
            this.rubric = new OpenAssessment.Rubric(rubricElement);
        }
        if (this.rubric !== null) {
            this.rubric.canSubmitCallback($.proxy(this.assessButtonEnabled, this));
        }
        sel.find("#student-training--001__assessment__submit").click(function(eventObject) {
            eventObject.preventDefault();
            view.assess();
        });
    },
    assess: function() {
        this.assessButtonEnabled(false);
        var options = {};
        if (this.rubric !== null) {
            options = this.rubric.optionsSelected();
        }
        var view = this;
        var baseView = this.baseView;
        this.server.trainingAssess(options).done(function(corrections) {
            var incorrect = $("#openassessment__student-training--incorrect", this.element);
            var instructions = $("#openassessment__student-training--instructions", this.element);
            if (!view.rubric.showCorrections(corrections)) {
                view.load();
                baseView.loadAssessmentModules();
                incorrect.addClass("is--hidden");
                instructions.removeClass("is--hidden");
            } else {
                instructions.addClass("is--hidden");
                incorrect.removeClass("is--hidden");
            }
            baseView.scrollToTop();
        }).fail(function(errMsg) {
            baseView.toggleActionError("student-training", errMsg);
            view.assessButtonEnabled(true);
        });
    },
    assessButtonEnabled: function(isEnabled) {
        var button = $("#student-training--001__assessment__submit", this.element);
        if (typeof isEnabled === "undefined") {
            return !button.hasClass("is--disabled");
        } else {
            button.toggleClass("is--disabled", !isEnabled);
        }
    }
};